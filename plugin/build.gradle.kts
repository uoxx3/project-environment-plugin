@file:Suppress("UnstableApiUsage")

/*
* This file was generated by the Gradle 'init' task.
*
* This generated file contains a sample Gradle plugin project to get you started.
* For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.5/userguide/custom_plugins.html in the Gradle documentation.
*/
plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`
    id("org.javamodularity.moduleplugin") version "1.8.12"
    id("com.gradle.plugin-publish") version "1.2.1"
}

group = "io.github.uoxx3"
version = "1.0.0"

val pluginName: String get() = "project-environment"
val pluginId: String get() = "$group.$pluginName"

/* -----------------------------------------------------
 * Java configuration
 * ----------------------------------------------------- */

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

/* -----------------------------------------------------
 * Plugin configuration
 * ----------------------------------------------------- */

gradlePlugin {
    website.set("https://github.com/uoxx3/project-environment-plugin")
    vcsUrl.set("https://github.com/uoxx3/project-environment-plugin.git")

    // Plugin definition
    val projectEnvironment by plugins.creating {
        description = "Gradle plugin that loads environment files and system variables automatically."
        displayName = "Project Environment Variables"
        id = pluginId
        implementationClass = "uoxx3.project.environment.PluginEntry"
        version = project.version as String
        tags.set(listOf("java", "gradle", "environment", "env"))
    }
}

afterEvaluate {
    publishing {
        publications {
            withType(MavenPublication::class.java) {
                // Check if the artifact name contains the "plugin" word
                if (!artifactId.endsWith("plugin") || artifactId.contains("gradle")) return@withType

                // Clean the artifact name
                val wordLen = "plugin".length
                val baseArtifact = artifactId.substring(0 until (artifactId.length - wordLen))

                // Check if the artifact name ends with dot "." character
                val artifactName = baseArtifact.dropLastWhile { it == '.' }

                artifactId = if (artifactName.isBlank()) pluginName else "$artifactName.$pluginName"
            }
        }
    }
}

/* -----------------------------------------------------
 * Testing configuration
 * ----------------------------------------------------- */

val functionalTestSourceSet = sourceSets.create("functionalTest") {}

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])
configurations["functionalTestRuntimeOnly"].extendsFrom(configurations["testRuntimeOnly"])

gradlePlugin.testSourceSets.add(functionalTestSourceSet)

/* -----------------------------------------------------
 * Task configurations
 * ----------------------------------------------------- */

val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
}

tasks.named<Task>("check") {
    dependsOn(functionalTest)
}

tasks.named<Test>("test") {
    useJUnitPlatform()
}

/* -----------------------------------------------------
 * Plugin dependencies
 * ----------------------------------------------------- */

dependencies {
    implementation("com.github.ushiosan23:jvm-utilities:1.0.0")
    compileOnly("org.jetbrains:annotations:24.1.0")
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}